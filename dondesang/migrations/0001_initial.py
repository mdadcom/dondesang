# Generated by Django 4.2.3 on 2023-08-02 16:19

from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Collects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(editable=False, max_length=100, unique=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('ferme', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Collect',
                'verbose_name_plural': 'Collects',
            },
        ),
        migrations.CreateModel(
            name='Donneur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(editable=False, max_length=100, unique=True)),
                ('numero_cnib', models.CharField(max_length=60, unique=True)),
                ('nom', models.CharField(blank=True, max_length=60, null=True)),
                ('nom_de_jeune', models.CharField(blank=True, max_length=60, null=True)),
                ('prenom', models.CharField(blank=True, max_length=60, null=True)),
                ('date_de_naissance', models.DateTimeField(blank=True, null=True)),
                ('age', models.CharField(blank=True, max_length=4, null=True)),
                ('lieu_de_naissance', models.CharField(blank=True, max_length=60, null=True)),
                ('sexe', models.CharField(blank=True, choices=[('H', 'HOMME'), ('F', 'FEMME')], max_length=10, null=True)),
                ('profession', models.CharField(blank=True, max_length=60, null=True)),
                ('secteur', models.CharField(blank=True, max_length=80, null=True)),
                ('tel', models.IntegerField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=80)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('collects', models.ManyToManyField(blank=True, to='dondesang.collects')),
            ],
            options={
                'verbose_name': 'Donneur',
                'verbose_name_plural': 'Donneurs',
                'db_table': 'donneur',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Entretien',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_du_jour', models.DateTimeField(blank=True, null=True)),
                ('numero', models.IntegerField()),
                ('collecte', models.CharField(blank=True, choices=[('Fixe', 'Fixe'), ('Mobile', 'Mobile')], max_length=10, null=True)),
                ('premier', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('si_premier', models.CharField(blank=True, max_length=120, null=True)),
                ('en_couple', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('en_couple_oui', models.CharField(blank=True, choices=[('Monogamie', 'Monogamie'), ('Polygamie', 'Polygamie')], max_length=10, null=True)),
                ('en_couple_non', models.CharField(blank=True, choices=[('Celiba', 'Celiba'), ('Divorce', 'Divorce'), ('Veuf', 'Veuf')], max_length=10, null=True)),
                ('sante', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('affections', multiselectfield.db.fields.MultiSelectField(choices=[('Infarctus', 'Infarctus'), ('Rhumatisme Articulaire', 'Rhumatisme Articulaire'), ('Diabète sous insuline', 'Diabète sous insuline'), ('Angine de poitrine', 'Angine de poitrine'), ('Asthme instable(crise-de 6 mois)', 'Asthme instable(crise-de 6 mois)'), ('Dermatose', 'Dermatose'), ('Troubles cardiaques', 'Troubles cardiaques'), ('Maladie du foie', 'Maladie du foie'), ('Cancer', 'Cancer'), ('HTA instable', 'HTA instable'), ('Tuberculose', 'Tuberculose'), ('Autre maladie chronique grave', 'Autre maladie chronique grave'), ('Epilepsie', 'Epilepsie'), ('Drépanocytose(ss,sc,cc,)', 'Drépanocytose(ss,sc,cc,)'), ('Maladie Neurologique', 'Maladie Neurologique'), ('Trouble de la coagulation sanguine', 'Trouble de la coagulation sanguine'), ('Aucune', 'Aucune')], default='Aucune', max_length=250)),
                ('transfusion', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('drogue', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('tatou', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('infection', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('exposition', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('relations', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('chirgi', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('n_partenaire', models.IntegerField(blank=True, null=True)),
                ('enceinte', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('acupuncture', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('sut_plaies', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('partenaire_s', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('vaccin', models.CharField(blank=True, choices=[('Fièvre jaune', 'Fièvre jaune'), ('Rougeole', 'Rougeole'), ('Varicelle', 'Varicelle'), ('Rubéole', 'Rubéole'), ('Typhoïde', 'Typhoïde')], max_length=100, null=True)),
                ('auvaccin', models.CharField(blank=True, max_length=50, null=True)),
                ('s_dentaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('fievre', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('plaies_ou', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('medicament', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('aumedicament', models.CharField(blank=True, max_length=50, null=True)),
                ('medicament_p', models.CharField(blank=True, choices=[('Antibiotique dans les 07 jours', 'Antibiotique dans les 07 jours'), ('Anti-inflammatoire/Corticoïde dans les 03 jours', 'Anti-inflammatoire/Corticoïde dans les 03 jours'), ('Antipaludéen dans les 14 jour', 'Antipaludéen dans les 14 jour')], max_length=100, null=True)),
                ('date_de_p', models.CharField(blank=True, max_length=50, null=True)),
                ('motif_p_medicament', models.CharField(blank=True, max_length=100, null=True)),
                ('enfant', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('enceint_actu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('en_regle', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('resultat_p', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('si_resultat', models.CharField(blank=True, choices=[('Positifs', 'Positifs'), ('Negatifs', 'Negatifs')], max_length=100, null=True)),
                ('le_resultat', models.CharField(blank=True, max_length=50, null=True)),
                ('poid', models.IntegerField(blank=True, null=True)),
                ('taux_hd', models.IntegerField(blank=True, null=True)),
                ('ta', models.IntegerField(blank=True, null=True)),
                ('consentement', multiselectfield.db.fields.MultiSelectField(choices=[('j_ai bien été informé', 'j_ai bien été informé'), ('je confirme que', 'je confirme que'), ('je consens à donner de mon sang', 'je consens à donner de mon sang'), ('j_accepte que mon sang', 'j_accepte que mon sang'), ('j_ai été informé que', 'j_ai été informé que'), ('Aucune', 'Aucune')], default='Aucune', max_length=250)),
                ('apte', models.CharField(blank=True, choices=[('APTE', 'APTE'), ('INAPTE TEMPORAIRE', 'INAPTE TEMPORAIRE'), ('INAPTE DEFINITIVE', 'INAPTE DEFINITIVE')], max_length=100, null=True)),
                ('code_ci', models.CharField(blank=True, max_length=50, null=True)),
                ('identification', models.CharField(blank=True, max_length=30, null=True)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('donneur', models.ManyToManyField(blank=True, to='dondesang.donneur')),
            ],
        ),
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('code', models.IntegerField(unique=True)),
                ('date_created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Pays',
            },
        ),
        migrations.CreateModel(
            name='Predon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apte', models.CharField(blank=True, max_length=30, null=True)),
                ('q_preleve', models.IntegerField()),
                ('preparation', models.CharField(blank=True, choices=[('AvecCPS', 'Avec CPS'), ('Sans CPS', 'Sans CPS')], max_length=30, null=True)),
                ('inapte', models.CharField(blank=True, choices=[('ITemporaire', 'ITemporaire'), ('IDefinitif', 'IDefinitif')], max_length=30, null=True)),
                ('code_ci', models.CharField(blank=True, max_length=30, null=True)),
                ('identification', models.CharField(blank=True, max_length=30, null=True)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('entretien', models.ManyToManyField(to='dondesang.entretien')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('pays', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dondesang.pays')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=60, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ville',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dondesang.region')),
            ],
            options={
                'verbose_name': 'Ville',
                'verbose_name_plural': 'Villes',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('ville', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dondesang.ville')),
            ],
        ),
        migrations.CreateModel(
            name='Preleve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heur_p', models.TimeField()),
                ('dure_p', models.TimeField()),
                ('quantite_p', models.IntegerField()),
                ('poche', models.CharField(blank=True, choices=[('Simple', 'Simple'), ('Double', 'Double'), ('Triple', 'Triple'), ('Quadruple', 'Quadruple')], max_length=100, null=True)),
                ('observation', models.CharField(blank=True, choices=[('RAS', 'RAS'), ('Problème de veine', 'Problème de veine'), ('Malaise', 'Malaise')], max_length=100, null=True)),
                ('autre', models.CharField(blank=True, max_length=100, null=True)),
                ('identif_p', models.CharField(max_length=100)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('predon', models.ManyToManyField(to='dondesang.predon')),
            ],
        ),
        migrations.AddField(
            model_name='donneur',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dondesang.type'),
        ),
        migrations.AddField(
            model_name='donneur',
            name='ville',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dondesang.ville'),
        ),
        migrations.AddField(
            model_name='collects',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dondesang.zone'),
        ),
    ]
